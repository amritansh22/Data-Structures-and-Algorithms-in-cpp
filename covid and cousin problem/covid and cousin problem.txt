After a dreadful lockdown, you wish to meet your friend. You live in block ‘s’. You can only move ‘f’ blocks forward or ‘b’ blocks backward. Suppose, there are ‘t’ blocks in total. If you try to move ‘f’ blocks forward and there are not sufficient blocks left then you cannot move at all. Similarly, if you try to move ‘b’ blocks backward and there are not enough blocks, this move is invalid. Now you know your friend lives in ‘d’ block so, you decide to write a program to give you minimum number of moves required to reach your friend. If you cannot reach the destination, simply print “Not reachable”.

Given input t, s, d, f, b (Total blocks, source, destination, forward, backward). Find the minimum number of moves required to move from ‘s’ to ‘d’ or output “Not reachable” if the solution is not possible.

Constraints:

1<=k<=10

0<=s,d<=t<=10000000

0<=f,b<=10000000

Input Format
The first line of the input will depict ‘k’ number of testcases which follow k number of lines each of which consists t, s, d, f and b.

Output Format
The output will be of one line consisting of minimum number of moves required to reach from s to d or return “Not reachable” if there is no way to reach d. 



Sample Testcase #0
Testcase Input
1
16 7 1 0 2 
Testcase Output
3
Explanation
You can move along the path: 7-5-3-1 (backward,backward,backward)

 So, minimum moves required will be 3.

Sample Testcase #1
Testcase Input
2
36 0 3 9 0
64 5 9 8 6
Testcase Output
Not reachable
4
Explanation
For test case 1, Since you need to go from 0 to 3 you will first go to 9 and then since you can not move backward , so the desired destination is not reachable.

For test case 2, you can move along the path: 5-13-7-15-9 (forward,backward,forward,backward)

So, minimum moves required will be 4.
