/*
Firstly Showing code for Euclids Method

#include<iostream>
using namespace std;
int gcd(long long a, long long b){
    return (b == 0) ? a: gcd(b, a%b) ;
}
int main() {
    long long a, b;
    cin>>a>>b;
    cout<<gcd(a,b)<<endl;

    return 0;
}
For lcm
#include<iostream>
using namespace std;
int gcd(long long a, long long b){
    return (b == 0) ? a: gcd(b, a%b) ;
}
int main() {
    long long a, b;
    cin>>a>>b;
    cout<<gcd(a,b)<<endl;

    return 0;
}

*/
//Now coming to Extended Euclid's Method

#include<stdio.h>
#include<iostream>
using namespace std;
int x,y,GCD;
void extendedEuclidMethod(int a, int b){
        // base case
	if(b == 0){
		GCD = a;
		x = 1; y = 0;
	}
	//Recursive call
       //1. Call the fuction
	extendedEuclidMethod(b, a%b);
	int cx = y;
	int cy = x - (a/b)*y;

       //Now figuring out current x and current y by taking temporary variable cx and cy
	
	x = cx;
	y = cy;
	
	return;
	
}
int gcd(int a, int b){
        //Base case vs Recursive Case
	return (b == 0) ? a: gcd(b, a%b) ;
}
int main() {
	extendedEuclidMethod(18, 30);
        //Printing final values
	cout<<x<<" "<<y<<endl;

	return 0;
}
